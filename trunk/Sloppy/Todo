
Next in Queue:

(A) Group Properties

    - serialize group properties

    - Allow setting group properties in layerwin
      Maybe rework layerwin completely ?



-----
ASCII Import:

- If we always read the header, then the header could leave the file 
  descriptor at the first non-comment line?  There would be no need for
  a tell or seek.

- throw away trailing and leading whitespaces: string.strip(line)
  where string is a module

- another way to split up strings: separator.separate(line)
  where separator is the separator

- allow None items?
  if null.count(string.strip(item)) > 0:
     collist[index].add_element(None)

- determine type: is int? is float? if neither, then assume string

- super(ThisClass, self).__init__(args)  (without self)

- 
FOR 0.5.2:
==========



(B) Metadata

    - display metadata, so that the import makes more sense.

    - maybe allow to edit the regular expressions that lead to the import metadata?


(C) little things

    - allow comments for plots and datasets.
    
    - props: CheckValid, ValueDict -> better naming convention.


(D) LayerWin and Toolbox

    - try to rewrite the layerwin using the new pwconnect mechanism.
    
    - Toolbox: 
      Add a combobox similar to the existing one with all the layers
      The existing layer tool should be put into a tab and could offer
      things to edit the layer.


------------------------------------------------------------------------------
DETAILS FOR 0.5.3:

== CUSTOM GNUPLOT EXPORT ==

- allow to create a gnuplot export directory containing a gnuplot file
  and the data files
- allow to include arbitrary data at specific positions into the gnuplot.

- re-implement some kind of gnuplot window or integrate that into the toolbox.




------------------------------------------------------------------------------
------------------------------------------------------------------------------
- have an option in the import dialog to always ask for options.
  The equivalent in the dnd process would be to have the control 
  key or something similar pressed down.

- What if we have two templates for the same extension?

  -> either ask the user what to do
  -> or prefer the template that is on the top.  This would
     require a 'move up' and 'move down' button in the preferences
     dialog

###############################################################################

BUGFIXES:

- lock Sloppy Archive upon access

- if clicking on 'apply' or any other button in the layer window,
  we need to apply all changes that are not yet active.  Maybe by
  moving focus to the current button?






==============================================================================

PLANS FOR BEYOND:
=================

- column properties: column type (default 'f')
  => We need to replace the column properties dialog by a dialog
     that is not based on OptionsDialog...

- allow strings (=> This would cause trouble with the splitting of comments)
- allow dates  ???

- implement multiplot for gnuplot!
  => move mpl.arrange method to plot.arrange_layers! ?

- What happens if I toggle the visibility of a layer?  Will it disappear?

- let layerwindow use pwconnect (or whatever it is called) and
deprecate propwidgets.

- add the possibility in statusbar to show the column label/key


== SIGNALS ==

- don't update tools window if it is hidden, i.e. disconnect signals!

- Signals.connect_once -> requires an additional flag in the SignalContainer




###############################################################################
#EVERYTHING BELOW THIS POINT IS JUST A COLLECTION OF IDEAS

- we might want to change cx, cy to a string of the form

  'column:index'

  where column can either be a column number or a column name, while
  index is a valid index.  This way, we could specify ranges without
  requiring yet another property.


export
------
- ps should have correct orientation
- aspect ratio of figures should be preserved.
- gnuplot preview :-) ?


View
----

- A view defines the start/end points
- Each Plot has a ViewList, with at least one entry, the 'current'
  view.  There should be a button 'save view as', e.g. 'overview',
  'region 1'.

  Hmmm.. But a view defines the start/end point for several axes...



- Something to think about: 

  notify::labels -> the _contents_ of the prop labels (which is a
    ListProp or a DictProp) has changed.

  notify -> the _contents_ of the object has changed (i.e. at least one
    of its Props has changed).  The changed properties should be listed 
    in an additional argument.

  BUT right now we have notify::layer and notify::project, where layer
  is not even a Prop.



#----------------------------------------------------------------------
   
#         Set the foreground color.  fg can be a matlab format string, a
#         html hex color string, an rgb unit tuple, or a float between 0
#         and 1.  In the latter case, grayscale is used.

#         The GraphicsContext converts colors to rgb internally.  If you
#         know the color is rgb already, you can set isRGB to True to
#         avoid the performace hit of the conversion

# ----------------------------------------------------------------------


Plotting
--------
- what about nans/masked arrays? => use numeric
- what about broken axes ?


Importer
--------

- Import XPS spectra as multiple worksheets => multi ASCII Import

  Main Header
    Header Table1
    Data Table1
    Header Table2
    Data Table2
    ...

- what about masked values?


Plugins:
--------

- reverse axes.


Cool ideas:  
----------

- the method 'add_plots', 'add_datasets' might mark the datasets as 
  '_new_'.  If you double click on any such object, this new mark is
  removed.  The new mark could be a little star or something similar.

- preview window that tries to construct a preview via
  'create_plot_from_datasets'


Minor fixes
-----------

- Add README file to project explaining how to extract the datasets.

  This is an important step to saving arbitrary data.

   create temporary directory

   write dataset to temporary directory
 
   obtain filelist from project archive, exclude all datasets and project.xml

   write all files from the filelist to the temporary directory.
   Because we don't want to do this every time we save, we need to keep
   track if any of these files have changed.

   tar-zip temporary directory


#==============================================================================
# Plotting Enhancements

=> we might want to implement hlines and vlines in the Plot.
   Then we can combine the methods to select a line with the method
   to put a line into the plot :-)

   There is a method axvline or something that should do exactly that.

    #--------------------------------------------------
    # Text Snippet to create horizontal/vertical help lines

    #         self.lx, = ax.plot( (0,0), (0,0), 'k-' )  # the horiz line
    #         self.ly, = ax.plot( (0,0), (0,0), 'k-' )  # the vert line

    #         # text location in axes coords
    #         self.txt = ax.text( 0.7, 0.9, '', transform=ax.transAxes)

    #         # update the line positions
    #         self.lx.set_data( (minx, maxx), (y, y) )
    #         self.ly.set_data( (x, x), (miny, maxy) )

    #         self.txt.set_text( 'x=%1.2f, y=%1.2f'%(x,y) )
    #         draw()



 
------------------------------------------------------------------------------

Export:

(1) allow export templates => configuration file?

- allow multi-export, especially also export several files in one
  postscript file

- allow adding linked data -- display them differently ?
  be careful though about relative/absolute path names

- Everything is centered around Tables.... why not?
  Well, but we need to think about what to do once regular arrays are allowed:

  - all backends need to check the data type before using the data
  - the treeview must display different icons
  - when editing an array, we can't use the tableview

- When a project is saved, then naturally all data files, which have not
  yet been loaded, are first imported, and then exported.... This is 
  a lot of unnecessary work. Why not check for this case and then just copy
  the file from the archive to the directory?


- Plot Templates.

#----------------------------------------------------------------------


#==============================================================================

FANCY EXTRA STUFF

- # - set key noautotitles   => only labels plots that have an explicit title option
- allow hiding the row display in tableview
- allow opening an editor for external data
- allow 'unit' column, e.g. 'nm' and allow to convert to other units!
- rewrite DatasetWindow insert/remove methods so that it can be
  extended to cut/copy/paste operations.
- export dataset 

- implement nifty keyboard mapping ;-)

If so (recommended):

# create accelgroup, add to window
ag = gtk.AccelGroup()
window.add_accel_group(ag)
menu = gtk.Menu()
menu.set_accel_group(ag)

menuitem = gtk.MenuItem("boo")
# set unique path to identify the menuitem
menuitem.set_accel_path("<SomeName>/SomeName/SomeName/MenuItemName")

menu.append(menuitem)

and at the end of the prog 'gtk.accel_map_save("moo")' and at the
beginning of the prog (after setting up the menus), call
'gtk.accel_map_load("moo")', and if the load fails,
gtk.accel_map_change_entry("<SomeName>/SomeName/SomeName/MenuItemName",
gtk.gdk.keyval_from_name("S"), gtk.gdk.CONTROL_MASK, True)


examples for format

%3.0em    1e+03
%2.0f     100.00
%L        3
