
FOR 0.5.1:
==========

- FINISH TEMPLATES



FOR 0.5.2:
==========

- ADD GROUP PROPERTIES
- ADD ERROR HANDLING (msgwin.py)
- ADD OVERALL MORE VERBOSITY (statusbar, progress bar)

------------------------------------------------------------------------------

DETAILS FOR 0.5.1:


- Right now it is not possible to specify a None value in a SpinButton
  connector widget.  But this is definitely needed for the importer
  templates!  If I can't find a better solution, then maybe it would be
  wise to have a button somewhere to enable/disable the spinbutton?

- better response if template key is invalid

- ImporterRegistry -> importer_registry

- iohelper.set_attributes

  I have the following problem:
  
    if the attribute value is None, then it is not saved.
    However, what if the reset value for a prop is different from None?
    Then a value of None would imply a value that is different than what
    we started from.

- rework regular expression for column headers: e.g. backslash is not
  recognized.  Is it not recognized from the pKeyword or from the ASCII 
  import regexp?  In the first case, we might want to write a coercion
  method.  


- use sloppy version for both project.xml and config.xml



DETAILS FOR 0.5.2:

- serialize group properties

- Allow setting group properties in layerwin

- display metadata

- Error Handling (-> msgwin.py)

- status bar messages :-)

DETAILS FOR 0.5.3:

== CUSTOM GNUPLOT EXPORT ==

- allow to create a gnuplot export directory containing a gnuplot file
  and the data files
- allow to include arbitrary data at specific positions into the gnuplot.





###############################################################################

BUGFIXES:

- props: CheckValid, ValueDict -> better naming convention.

- when writing an archive to a place where you cannot save it,
   the user is currently not notified that the IO fails.

- lock Sloppy Archive upon access

- if clicking on 'apply' or any other button in the layer window,
  we need to apply all changes that are not yet active.  Maybe by
  moving focus to the current button?






==============================================================================

PLANS FOR BEYOND:
=================

- column properties: column type (default 'f')
  => We need to replace the column properties dialog by a dialog
     that is not based on OptionsDialog...

- allow strings (=> This would cause trouble with the splitting of comments)
- allow dates  ???

- implement multiplot for gnuplot!
  => move mpl.arrange method to plot.arrange_layers! ?

- What happens if I toggle the visibility of a layer?  Will it disappear?

- consistency: ValueDict and ValueList (i.e. remove CheckValue)

- let layerwindow use pwconnect (or whatever it is called) and
deprecate propwidgets.

- add the possibility in statusbar to show the column label/key

- add documentation for objects.




== SIGNALS ==

- don't update tools window if it is hidden, i.e. disconnect signals!

- Signals.connect_once -> requires an additional flag in the SignalContainer




###############################################################################
#EVERYTHING BELOW THIS POINT IS JUST A COLLECTION OF IDEAS

- we might want to change cx, cy to a string of the form

  'column:index'

  where column can either be a column number or a column name, while
  index is a valid index.  This way, we could specify ranges without
  requiring yet another property.


export
------
- ps should have correct orientation
- aspect ratio of figures should be preserved.
- gnuplot preview :-) ?


View
----

- A view defines the start/end points
- Each Plot has a ViewList, with at least one entry, the 'current'
  view.  There should be a button 'save view as', e.g. 'overview',
  'region 1'.

  Hmmm.. But a view defines the start/end point for several axes...



- Something to think about: 

  notify::labels -> the _contents_ of the prop labels (which is a
    ListProp or a DictProp) has changed.

  notify -> the _contents_ of the object has changed (i.e. at least one
    of its Props has changed).  The changed properties should be listed 
    in an additional argument.

  BUT right now we have notify::layer and notify::project, where layer
  is not even a Prop.



#----------------------------------------------------------------------
   
#         Set the foreground color.  fg can be a matlab format string, a
#         html hex color string, an rgb unit tuple, or a float between 0
#         and 1.  In the latter case, grayscale is used.

#         The GraphicsContext converts colors to rgb internally.  If you
#         know the color is rgb already, you can set isRGB to True to
#         avoid the performace hit of the conversion

# ----------------------------------------------------------------------


Plotting
--------
- what about nans/masked arrays? => use numeric
- what about broken axes ?


Importer
--------

- Import XPS spectra as multiple worksheets => multi ASCII Import

  Main Header
    Header Table1
    Data Table1
    Header Table2
    Data Table2
    ...

- what about masked values?
- Show Import Dialog with progress bar.


Plugins:
--------

- reverse axes.


Cool ideas:  
----------

- the method 'add_plots', 'add_datasets' might mark the datasets as 
  '_new_'.  If you double click on any such object, this new mark is
  removed.  The new mark could be a little star or something similar.

- preview window that tries to construct a preview via
  'create_plot_from_datasets'


Minor fixes
-----------

- Add README file to project explaining how to extract the datasets.

  This is an important step to saving arbitrary data.

   create temporary directory

   write dataset to temporary directory
 
   obtain filelist from project archive, exclude all datasets and project.xml

   write all files from the filelist to the temporary directory.
   Because we don't want to do this every time we save, we need to keep
   track if any of these files have changed.

   tar-zip temporary directory


#==============================================================================
# Plotting Enhancements

=> we might want to implement hlines and vlines in the Plot.
   Then we can combine the methods to select a line with the method
   to put a line into the plot :-)

   There is a method axvline or something that should do exactly that.

    #--------------------------------------------------
    # Text Snippet to create horizontal/vertical help lines

    #         self.lx, = ax.plot( (0,0), (0,0), 'k-' )  # the horiz line
    #         self.ly, = ax.plot( (0,0), (0,0), 'k-' )  # the vert line

    #         # text location in axes coords
    #         self.txt = ax.text( 0.7, 0.9, '', transform=ax.transAxes)

    #         # update the line positions
    #         self.lx.set_data( (minx, maxx), (y, y) )
    #         self.ly.set_data( (x, x), (miny, maxy) )

    #         self.txt.set_text( 'x=%1.2f, y=%1.2f'%(x,y) )
    #         draw()



 
------------------------------------------------------------------------------

Export:

(1) allow export templates => configuration file?

- allow multi-export, especially also export several files in one
  postscript file

- allow adding linked data -- display them differently ?
  be careful though about relative/absolute path names

- Everything is centered around Tables.... why not?
  Well, but we need to think about what to do once regular arrays are allowed:

  - all backends need to check the data type before using the data
  - the treeview must display different icons
  - when editing an array, we can't use the tableview

- When a project is saved, then naturally all data files, which have not
  yet been loaded, are first imported, and then exported.... This is 
  a lot of unnecessary work. Why not check for this case and then just copy
  the file from the archive to the directory?


- Plot Templates.

#----------------------------------------------------------------------


#==============================================================================

FANCY EXTRA STUFF

- # - set key noautotitles   => only labels plots that have an explicit title option
- allow hiding the row display in tableview
- allow opening an editor for external data
- allow 'unit' column, e.g. 'nm' and allow to convert to other units!
- rewrite DatasetWindow insert/remove methods so that it can be
  extended to cut/copy/paste operations.
- export dataset 

- implement nifty keyboard mapping ;-)

If so (recommended):

# create accelgroup, add to window
ag = gtk.AccelGroup()
window.add_accel_group(ag)
menu = gtk.Menu()
menu.set_accel_group(ag)

menuitem = gtk.MenuItem("boo")
# set unique path to identify the menuitem
menuitem.set_accel_path("<SomeName>/SomeName/SomeName/MenuItemName")

menu.append(menuitem)

and at the end of the prog 'gtk.accel_map_save("moo")' and at the
beginning of the prog (after setting up the menus), call
'gtk.accel_map_load("moo")', and if the load fails,
gtk.accel_map_change_entry("<SomeName>/SomeName/SomeName/MenuItemName",
gtk.gdk.keyval_from_name("S"), gtk.gdk.CONTROL_MASK, True)


examples for format

%3.0em    1e+03
%2.0f     100.00
%L        3
