
- Tools.depends_on  und generic_on_update handhaben doppelte
  Namen nicht richtig, da der Index über den Namen gesucht wird.
  Sinnvoller wäre es vielleicht, direkt den Index zu übergeben,
  wenn generic_on_update aufgesetzt wird.

- Ergebnisse des PeakFinders evtl. in ein Dataset übergeben und dieses
  dann anzeigen lassen?

- Zuordnung Peaks -> Symbol

- Peaks als solche der Zeichnung hinzufügen

- Peaks abspeichern (evtl. Log?)

- layer logarithmisch machen funktioniert nicht

- wenn backend ausgewählt wird, aktualisiert sich die Layer nicht selbst...




(for 0.5.3):
============

- this is getting too complicated:
  If the line is redrawn, then the range is scaled automatically (argh),
  therefore we would have to reset the axis after each line draw...
  Obviously we need to have a way to distinguish between: 
  (1) just a minor change, which is worth of updating just a single object
  (2) redraw everything

  E.g. if we update a line, then the legend should reflect it, thus the
  legend needs to be updated. 

  change line ---> update line-painter ---> update legend ---> redraw canvas

  However, if we change a lot of settings, then we don't want the drawing
  methods to be so smart.

  One way to achieve this is to block the signal that emits 'update legend'.

- fix dragging of dockables

- bugfix for data cursor: if mpl handles the left/right, then don't let
  gtk handle it!

- add cursor position in status bar and let all widgets call the status-
  bar of the app (maybe via a signal: 'push-status', context, msg and
  for the special case of coordinates: 'push-coordinates', x, y)

- put Dataset into notebooks as well.  This will unify the undo.

- remember heights of the dockbooks

- open the first available plot for testing

- minimum size for sidepane

- synchronize tools with backend -- if backend closes, they should discard
  their data as well

- allow to refer to a layer's active line

- queue redraw by emitting a signal

    'queue-redraw', backend

  backend can be determined by a Painter method

    get_backend()

  MAYBE SIMPLER: get_backend().queue_redraw()


  When should we redraw?

  (1) Whenever an action is finished, we can check if a redraw was requested.
  (2) Whenever a certain time has elapsed, we might want to check if
      a redraw is required.

  Consequently, for calculations that take longer time and manipulate the
  plot or the dataset, we must be able to block signals, so that their
  execution is not slowed down by periodical updates.


- update_axis => if start/end is None, then no range is set!!!!
  What should we do? BTW, we could really move te axis into a new painter,
  since we also want each axis to have a bounding box (clicking on it)

- allow manipulation of existing lines, i.e.
  -- if I set visible=False, update it accordingly
  -- if I set other style properties, update them as well
  -- what about the line source? This requires a custom widget -- so write it!
  -- 



SMALL CLEANUPS TO DO:
=====================

- change headers (copyright)
- set svn props properly
- maybe move the importers and templates into the app, so we can
  deprecate 'globals' and replace it by the app. OR simply rename
  application to app, the app instance to app.instance and have
  all vars that were in globals into app (app.templates, etc.)


