
- ComboBox of available lines instead of using the active line.
  => connect to any change of any layer's lines ???
  
To test this notification I should next implement the addition of new lines
in the PropertyEditor.

- allow popup menu in PropertyEditor, so that you can add/remove elements
  in the view, e.g. Lines.
  
  Where should I register the actions?
  Maybe request a popup by the class name, e.g. 
    'popup_property_editor_line'
    'popup_property_editor_legend'
  and if no such popup exist, then uimanager.get_widget will return None.


- react on addition/removal of items by updating the tree

##############################################################################

  
Property Editor
================

- Clicking on a part of the graph should send out a signal
   'user-pick'
  from the backend, which the OmniTool should catch and move the
  treeview cursor to that element.
  

PeakFinder Tool
===============

- Ergebnisse des PeakFinders evtl. in ein Dataset übergeben und dieses
  dann anzeigen lassen?

- Zuordnung Peaks -> Symbol

- Peaks als solche der Zeichnung hinzufügen

- Peaks abspeichern (evtl. Log?)


MPL Backend
===========

- 'paint' can be called from other methods and shouldn't queue a redraw.
  Only on_update methods should!
 

Checkwidgets
============

- what about the line source? This requires a custom widget -- so write it!
  => this DisplayLineSource should be very similar to the DisplayLine widget.

Docks/Tools in General
======================

- The tools have a problem: Close the omni tool, leave SloppyPlot.
  Restart SloppyPlot, open the omni tool, then select the first plot.
  The Omni Tool will not be updated, I guess this is because the active
  backend hasn't changed but was already set.

- Migrate Plot window to some kind of Tool (would allow reordering). 
  - Make Plot active when you click in the explorer.
  - Allow closing a Plot (Maybe we could simply add a button in the notebook tab)
  - close a plot as a menu point

- fix dragging of dockables (when moving to the bottom separator, the tool
  is not moved to the end) 

- put Dataset into notebooks as well.  This will unify the undo.

- Plot and Dataset are descendants of DockableView
  (uistring, actions, title).

- allow detaching tools into separate windows (problem: saving)

- not every toolbox allows every tool!
  
- remember heights of the dockbooks

- open the first available plot for testing

- minimum size for sidepane

- synchronize tools with backend -- if backend closes, they should discard
  their data as well
  

MISC BUGS
=========

- layer logarithmisch machen funktioniert nicht immer

- wenn backend ausgewählt wird, aktualisiert sich die Layer nicht selbst...

- bugfix for data cursor: if mpl handles the left/right, then don't let
  gtk handle it!

- add cursor position in status bar and let all widgets call the status-
  bar of the app (maybe via a signal: 'push-status', context, msg and
  for the special case of coordinates: 'push-coordinates', x, y)

- Adding Tools does not always work. I guess the passing of the popuinfo
  is somehow not in sync, i.e. the popupinfo is not yet passed when the tool
  is added.


SMALL CLEANUPS TO DO BEFORE RELEASING
======================================

- change headers (copyright)

- set svn props properly

- maybe move the importers and templates into the app, so we can
  deprecate 'globals' and replace it by the app. OR simply rename
  application to app, the app instance to app.instance and have
  all vars that were in globals into app (app.templates, etc.)


